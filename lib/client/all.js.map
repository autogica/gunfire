{"version":3,"sources":["computerenderer.js"],"names":[],"mappings":"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","file":"all.js","sourcesContent":["// see https://github.com/mrdoob/three.js/blob/master/examples/js/SimulationRenderer.js\n\nfunction SimulationRenderer(WIDTH, renderer) {\n\n\tWIDTH = WIDTH || 4;\n\tvar camera = new THREE.Camera();\n\tcamera.position.z = 1;\n\n\t// Init RTT stuff\n\tgl = renderer.getContext();\n\n\tif( !gl.getExtension( \"OES_texture_float\" )) {\n\t\talert( \"No OES_texture_float support for float textures!\" );\n\t\treturn;\n\t}\n\n\tif( gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) == 0) {\n\t\talert( \"No support for vertex shader textures!\" );\n\t\treturn;\n\t}\n\n\tvar scene = new THREE.Scene();\n\n\tvar uniforms = {\n\t\ttime: { type: \"f\", value: 1.0 },\n\t\tresolution: { type: \"v2\", value: new THREE.Vector2( WIDTH, WIDTH ) },\n\t\ttexture: { type: \"t\", value: null }\n\t};\n\n\tvar passThruShader = new THREE.ShaderMaterial( {\n\t\tuniforms: uniforms,\n\t\tvertexShader: document.getElementById( 'passthru_vs' ).textContent,\n\t\tfragmentShader: document.getElementById( 'passthry_fs' ).textContent\n\t} );\n\n\tvar mesh = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), passThruShader );\n\n\tvar positionShader = new THREE.ShaderMaterial( {\n\n\t\tuniforms: {\n\t\t\ttime: { type: \"f\", value: 1.0 },\n\t\t\tdelta: { type: \"f\", value: 0.0 },\n\t\t\tresolution: { type: \"v2\", value: new THREE.Vector2( WIDTH, WIDTH ) },\n\t\t\ttexturePosition: { type: \"t\", value: null },\n\t\t\ttextureVelocity: { type: \"t\", value: null },\n\t\t},\n\t\tvertexShader: document.getElementById( 'vertexShader' ).textContent,\n\t\tfragmentShader: document.getElementById( 'fragmentShaderPosition' ).textContent\n\n\t} );\n\n\tthis.positionShader = positionShader;\n\n\tvar velocityShader = new THREE.ShaderMaterial( {\n\n\t\tuniforms: {\n\t\t\ttime: { type: \"f\", value: 1.0 },\n\t\t\tdelta: { type: \"f\", value: 0.0 },\n\t\t\tresolution: { type: \"v2\", value: new THREE.Vector2( WIDTH, WIDTH ) },\n\t\t\ttexturePosition: { type: \"t\", value: null },\n\t\t\ttextureVelocity: { type: \"t\", value: null },\n\t\t\ttesting: { type: \"f\", value: 1.0 },\n\t\t\tseperationDistance: { type: \"f\", value: 1.0 },\n\t\t\talignmentDistance: { type: \"f\", value: 1.0 },\n\t\t\tcohesionDistance: { type: \"f\", value: 1.0 },\n\t\t\tfreedomFactor: { type: \"f\", value: 1.0 },\n\t\t\tpredator: { type: \"v3\", value: new THREE.Vector3() }\n\t\t},\n\t\tdefines: {\n\t\t\tWIDTH: WIDTH.toFixed(2)\n\t\t},\n\t\tvertexShader: document.getElementById( 'vertexShader' ).textContent,\n\t\tfragmentShader: document.getElementById( 'fragmentShaderVelocity' ).textContent\n\n\t} );\n\n\tthis.velocityUniforms = velocityShader.uniforms;\n\n\tscene.add( mesh );\n\n\tvar flipflop = true;\n\tvar rtPosition1, rtPosition2, rtVelocity1, rtVelocity2;\n\n\tfunction init() {\n\t\tvar dtPosition = generatePositionTexture();\n\t\tvar dtVelocity = generateVelocityTexture();\n\n\t\trtPosition1 = getRenderTarget( THREE.RGBAFormat );\n\t\trtPosition2 = rtPosition1.clone();\n\t\trtVelocity1 = getRenderTarget( THREE.RGBFormat );\n\t\trtVelocity2 = rtVelocity1.clone();\n\n\t\tsimulator.renderTexture(dtPosition, rtPosition1);\n\t\tsimulator.renderTexture(rtPosition1, rtPosition2);\n\n\t\tsimulator.renderTexture(dtVelocity, rtVelocity1);\n\t\tsimulator.renderTexture(rtVelocity1, rtVelocity2);\n\n\t\tsimulator.velocityUniforms.testing.value = 10;\n\t}\n\n\tthis.init = init;\n\n\tfunction getRenderTarget( type ) {\n\t\tvar renderTarget = new THREE.WebGLRenderTarget(WIDTH, WIDTH, {\n\t\t\twrapS: THREE.RepeatWrapping,\n\t\t\twrapT: THREE.RepeatWrapping,\n\t\t\tminFilter: THREE.NearestFilter,\n\t\t\tmagFilter: THREE.NearestFilter,\n\t\t\tformat: type,\n\t\t\ttype: THREE.FloatType,\n\t\t\tstencilBuffer: false\n\t\t});\n\n\t\treturn renderTarget;\n\t}\n\n\t// Takes a texture, and render out as another texture\n\tthis.renderTexture = function ( input, output ) {\n\t\tmesh.material = passThruShader;\n\t\tuniforms.texture.value = input;\n\t\trenderer.render( scene, camera, output );\n\t}\n\n\n\tthis.renderPosition = function(position, velocity, output, delta) {\n\t\tmesh.material = positionShader;\n\t\tpositionShader.uniforms.texturePosition.value = position;\n\t\tpositionShader.uniforms.textureVelocity.value = velocity;\n\t\tpositionShader.uniforms.time.value = performance.now();\n\t\tpositionShader.uniforms.delta.value = delta;\n\t\trenderer.render( scene, camera, output );\n\t\tthis.currentPosition = output;\n\t}\n\n\tthis.renderVelocity = function(position, velocity, output, delta) {\n\t\tmesh.material = velocityShader;\n\t\tvelocityShader.uniforms.texturePosition.value = position;\n\t\tvelocityShader.uniforms.textureVelocity.value = velocity;\n\t\tvelocityShader.uniforms.time.value = performance.now();\n\t\tvelocityShader.uniforms.delta.value = delta;\n\t\trenderer.render( scene, camera, output );\n\t\tthis.currentVelocity = output;\n\t}\n\n\tthis.simulate = function( delta ) {\n\n\t\tif (flipflop) {\n\n\t\t\tsimulator.renderVelocity( rtPosition1, rtVelocity1, rtVelocity2, delta );\n\t\t\tsimulator.renderPosition( rtPosition1, rtVelocity2, rtPosition2, delta );\n\n\t\t} else {\n\n\t\t\tsimulator.renderVelocity( rtPosition2, rtVelocity2, rtVelocity1, delta );\n\t\t\tsimulator.renderPosition( rtPosition2, rtVelocity1, rtPosition1, delta );\n\n\t\t}\n\n\t\tflipflop = !flipflop;\n\n\t}\n\n\tfunction generatePositionTexture() {\n\n\t\tvar a = new Float32Array( PARTICLES * 4 );\n\n\t\tfor ( var k = 0, kl = a.length; k < kl; k += 4 ) {\n\n\t\t\tvar x = Math.random() * BOUNDS - BOUNDS_HALF;\n\t\t\tvar y = Math.random() * BOUNDS - BOUNDS_HALF;\n\t\t\tvar z = Math.random() * BOUNDS - BOUNDS_HALF;\n\n\t\t\ta[ k + 0 ] = x;\n\t\t\ta[ k + 1 ] = y;\n\t\t\ta[ k + 2 ] = z;\n\t\t\ta[ k + 3 ] = 1;\n\n\t\t}\n\n\t\tvar texture = new THREE.DataTexture( a, WIDTH, WIDTH, THREE.RGBAFormat, THREE.FloatType );\n\t\ttexture.minFilter = THREE.NearestFilter;\n\t\ttexture.magFilter = THREE.NearestFilter;\n\t\ttexture.needsUpdate = true;\n\t\ttexture.flipY = false;\n\n\t\treturn texture;\n\n\t}\n\n\tfunction generateVelocityTexture() {\n\n\t\tvar a = new Float32Array( PARTICLES * 3 );\n\n\t\tfor ( var k = 0, kl = a.length; k < kl; k += 3 ) {\n\n\t\t\tvar x = Math.random() - 0.5;\n\t\t\tvar y = Math.random() - 0.5;\n\t\t\tvar z = Math.random() - 0.5;\n\n\t\t\ta[ k + 0 ] = x * 10;\n\t\t\ta[ k + 1 ] = y * 10;\n\t\t\ta[ k + 2 ] = z * 10;\n\n\t\t}\n\n\t\tvar texture = new THREE.DataTexture( a, WIDTH, WIDTH, THREE.RGBFormat, THREE.FloatType );\n\t\ttexture.minFilter = THREE.NearestFilter;\n\t\ttexture.magFilter = THREE.NearestFilter;\n\t\ttexture.needsUpdate = true;\n\t\ttexture.flipY = false;\n\n\t\treturn texture;\n\n\t}\n\n}\n"],"sourceRoot":"/source/"}